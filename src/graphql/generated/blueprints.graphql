# ========================================
# AUTO-GENERATED FROM CONTENT BLUEPRINTS
# DO NOT EDIT MANUALLY
# Run: npm run generate:graphql
# ========================================

scalar DateTime
scalar JSON

enum Locale {
  EN
  AR
}

enum BlueprintType {
  DOCUMENT
  COMPONENT
}

# Base Asset type for media files
type Asset {
  id: ID!
  url: String!
  alt: String
  caption: String
  mimeType: String
  size: Int
  width: Int
  height: Int
}


# Prominent CTA section with heading, description, and button
type CTASection {
  id: ID!
  headingEn: String
  headingAr: String
  descriptionEn: String
  descriptionAr: String
  primaryButton: JSON
  secondaryButton: JSON
  backgroundColor: String

  # Metadata
  status: String!
  publishedAt: DateTime
  createdAt: DateTime!
  updatedAt: DateTime!
}

# Create custom forms with dynamic fields (contact, inquiry, registration, etc.)
type Form {
  id: ID!
  formNameEn: String
  formNameAr: String
  formTitleEn: String
  formTitleAr: String
  formDescriptionEn: String
  formDescriptionAr: String
  submitButtonTextEn: String
  submitButtonTextAr: String
  successMessageEn: String
  successMessageAr: String
  fields: JSON!
  notifications: JSON
  settings: JSON
  crmIntegration: JSON

  # Metadata
  status: String!
  publishedAt: DateTime
  createdAt: DateTime!
  updatedAt: DateTime!
}

# Large banner section with heading, subheading, image, and CTA
type HeroBanner {
  id: ID!
  headingEn: String
  headingAr: String
  subheadingEn: String
  subheadingAr: String
  backgroundImage: Asset!
  ctaButton: JSON
  alignment: String

  # Metadata
  status: String!
  publishedAt: DateTime
  createdAt: DateTime!
  updatedAt: DateTime!
}

# Responsive image gallery with multiple layout options
type ImageGallery {
  id: ID!
  titleEn: String
  titleAr: String
  images: [Asset!]!
  layout: String
  columns: Int

  # Metadata
  status: String!
  publishedAt: DateTime
  createdAt: DateTime!
  updatedAt: DateTime!
}

# WYSIWYG text editor with formatting options
type RichText {
  id: ID!
  contentEn: String
  contentAr: String
  alignment: String

  # Metadata
  status: String!
  publishedAt: DateTime
  createdAt: DateTime!
  updatedAt: DateTime!
}

# Embed videos from YouTube, Vimeo, or other platforms
type VideoEmbed {
  id: ID!
  titleEn: String
  titleAr: String
  videoUrl: String!
  thumbnail: Asset
  aspectRatio: String

  # Metadata
  status: String!
  publishedAt: DateTime
  createdAt: DateTime!
  updatedAt: DateTime!
}

# Company information with gallery
type about_section {
  id: ID!
  title: String!
  subtitle: String
  description: String!
  image: String
  gallery: String
  yearsOfExperience: String
  experienceLabel: String

  # Metadata
  status: String!
  publishedAt: DateTime
  createdAt: DateTime!
  updatedAt: DateTime!
}

# Scrolling animated text banner
type animated_headline {
  id: ID!
  textEn: String
  textAr: String
  speed: Int
  blackened: Boolean

  # Metadata
  status: String!
  publishedAt: DateTime
  createdAt: DateTime!
  updatedAt: DateTime!
}

# Showcase awards and achievements
type awards_section {
  id: ID!
  titleEn: String
  titleAr: String
  subtitleEn: String
  subtitleAr: String
  awards: String

  # Metadata
  status: String!
  publishedAt: DateTime
  createdAt: DateTime!
  updatedAt: DateTime!
}

# Display featured blog posts
type blog_section {
  id: ID!
  titleEn: String
  titleAr: String
  maxPosts: Int
  showFeaturedOnly: Boolean

  # Metadata
  status: String!
  publishedAt: DateTime
  createdAt: DateTime!
  updatedAt: DateTime!
}

# Display client logos and testimonials
type clients_section {
  id: ID!
  titleEn: String
  titleAr: String
  subtitleEn: String
  subtitleAr: String
  showLogos: Boolean
  showTestimonials: Boolean

  # Metadata
  status: String!
  publishedAt: DateTime
  createdAt: DateTime!
  updatedAt: DateTime!
}

# About section with carousel for homepage
type company_description_home {
  id: ID!
  titleEn: String
  titleAr: String
  subtitleEn: String
  subtitleAr: String
  descriptionEn: String
  descriptionAr: String
  yearsOfExperience: Int
  experienceLabelEn: String
  experienceLabelAr: String
  imageCount: Int
  showCta: Boolean
  ctaTextEn: String
  ctaTextAr: String
  ctaLink: String

  # Metadata
  status: String!
  publishedAt: DateTime
  createdAt: DateTime!
  updatedAt: DateTime!
}

# Contact form section
type contact_form {
  id: ID!
  titleEn: String
  titleAr: String
  subtitleEn: String
  subtitleAr: String
  showPhone: Boolean
  showEmail: Boolean
  showAddress: Boolean

  # Metadata
  status: String!
  publishedAt: DateTime
  createdAt: DateTime!
  updatedAt: DateTime!
}

# Display logos of media features or partners
type featured_in {
  id: ID!
  titleEn: String
  titleAr: String
  logos: String

  # Metadata
  status: String!
  publishedAt: DateTime
  createdAt: DateTime!
  updatedAt: DateTime!
}

# Main banner with background image/video and text overlay
type hero_banner {
  id: ID!
  titleEn: String
  titleAr: String
  subtitleEn: String
  subtitleAr: String
  backgroundImage: Asset
  backgroundVideo: String
  ctaTextEn: String
  ctaTextAr: String
  ctaLink: String

  # Metadata
  status: String!
  publishedAt: DateTime
  createdAt: DateTime!
  updatedAt: DateTime!
}

# Display Instagram posts or gallery
type instagram_section {
  id: ID!
  titleEn: String
  titleAr: String
  username: String
  maxPosts: Int

  # Metadata
  status: String!
  publishedAt: DateTime
  createdAt: DateTime!
  updatedAt: DateTime!
}

# Portfolio showcase for homepage
type portfolio_display_home {
  id: ID!
  headlineEn: String
  headlineAr: String
  sectionTitleEn: String
  sectionTitleAr: String
  descriptionEn: String
  descriptionAr: String
  projectCountEn: String
  projectCountAr: String
  showFeatured: Boolean
  maxItems: Int
  showCta: Boolean
  ctaTextEn: String
  ctaTextAr: String
  ctaLink: String
  projectsLinkTextEn: String
  projectsLinkTextAr: String
  projectsLink: String

  # Metadata
  status: String!
  publishedAt: DateTime
  createdAt: DateTime!
  updatedAt: DateTime!
}

# Process/methodology showcase
type process_section {
  id: ID!
  titleEn: String
  titleAr: String
  mainImage: Asset
  smallImage: Asset
  steps: String

  # Metadata
  status: String!
  publishedAt: DateTime
  createdAt: DateTime!
  updatedAt: DateTime!
}

# Visual separator between sections
type separator {
  id: ID!
  style: String
  height: Int

  # Metadata
  status: String!
  publishedAt: DateTime
  createdAt: DateTime!
  updatedAt: DateTime!
}

# Interactive services swiper/carousel
type services_showcase {
  id: ID!
  titleEn: String
  titleAr: String
  services: String

  # Metadata
  status: String!
  publishedAt: DateTime
  createdAt: DateTime!
  updatedAt: DateTime!
}

# Display key numbers and statistics
type stats_section {
  id: ID!
  titleEn: String
  titleAr: String
  stats: String

  # Metadata
  status: String!
  publishedAt: DateTime
  createdAt: DateTime!
  updatedAt: DateTime!
}

# Rich text content block
type text_content {
  id: ID!
  title: String!
  subtitle: String
  description: String!
  backgroundImage: String

  # Metadata
  status: String!
  publishedAt: DateTime
  createdAt: DateTime!
  updatedAt: DateTime!
}


input CTASectionFilterInput {
  status: String
  publishedAt_gte: DateTime
  publishedAt_lte: DateTime
  search: String
}

input CreateCTASectionInput {
  headingEn: String!
  headingAr: String!
  descriptionEn: String
  descriptionAr: String
  primaryButton: JSON
  secondaryButton: JSON
  backgroundColor: String
  status: String
  publishedAt: DateTime
}

input UpdateCTASectionInput {
  headingEn: String
  headingAr: String
  descriptionEn: String
  descriptionAr: String
  primaryButton: JSON
  secondaryButton: JSON
  backgroundColor: String
  status: String
  publishedAt: DateTime
}

input FormFilterInput {
  status: String
  publishedAt_gte: DateTime
  publishedAt_lte: DateTime
  search: String
}

input CreateFormInput {
  formNameEn: String!
  formNameAr: String!
  formTitleEn: String!
  formTitleAr: String!
  formDescriptionEn: String
  formDescriptionAr: String
  submitButtonTextEn: String
  submitButtonTextAr: String
  successMessageEn: String
  successMessageAr: String
  fields: JSON!
  notifications: JSON
  settings: JSON
  crmIntegration: JSON
  status: String
  publishedAt: DateTime
}

input UpdateFormInput {
  formNameEn: String
  formNameAr: String
  formTitleEn: String
  formTitleAr: String
  formDescriptionEn: String
  formDescriptionAr: String
  submitButtonTextEn: String
  submitButtonTextAr: String
  successMessageEn: String
  successMessageAr: String
  fields: JSON
  notifications: JSON
  settings: JSON
  crmIntegration: JSON
  status: String
  publishedAt: DateTime
}

input HeroBannerFilterInput {
  status: String
  publishedAt_gte: DateTime
  publishedAt_lte: DateTime
  search: String
}

input CreateHeroBannerInput {
  headingEn: String!
  headingAr: String!
  subheadingEn: String
  subheadingAr: String
  backgroundImage: ID!
  ctaButton: JSON
  alignment: String
  status: String
  publishedAt: DateTime
}

input UpdateHeroBannerInput {
  headingEn: String
  headingAr: String
  subheadingEn: String
  subheadingAr: String
  backgroundImage: ID
  ctaButton: JSON
  alignment: String
  status: String
  publishedAt: DateTime
}

input ImageGalleryFilterInput {
  status: String
  publishedAt_gte: DateTime
  publishedAt_lte: DateTime
  search: String
}

input CreateImageGalleryInput {
  titleEn: String
  titleAr: String
  images: [Asset!]!
  layout: String
  columns: Int
  status: String
  publishedAt: DateTime
}

input UpdateImageGalleryInput {
  titleEn: String
  titleAr: String
  images: [Asset!]
  layout: String
  columns: Int
  status: String
  publishedAt: DateTime
}

input RichTextFilterInput {
  status: String
  publishedAt_gte: DateTime
  publishedAt_lte: DateTime
  search: String
}

input CreateRichTextInput {
  contentEn: String!
  contentAr: String!
  alignment: String
  status: String
  publishedAt: DateTime
}

input UpdateRichTextInput {
  contentEn: String
  contentAr: String
  alignment: String
  status: String
  publishedAt: DateTime
}

input VideoEmbedFilterInput {
  status: String
  publishedAt_gte: DateTime
  publishedAt_lte: DateTime
  search: String
}

input CreateVideoEmbedInput {
  titleEn: String
  titleAr: String
  videoUrl: String!
  thumbnail: ID
  aspectRatio: String
  status: String
  publishedAt: DateTime
}

input UpdateVideoEmbedInput {
  titleEn: String
  titleAr: String
  videoUrl: String
  thumbnail: ID
  aspectRatio: String
  status: String
  publishedAt: DateTime
}

input about_sectionFilterInput {
  status: String
  publishedAt_gte: DateTime
  publishedAt_lte: DateTime
  search: String
}

input Createabout_sectionInput {
  title: String!
  subtitle: String
  description: String!
  image: String
  gallery: String
  yearsOfExperience: String
  experienceLabel: String
  status: String
  publishedAt: DateTime
}

input Updateabout_sectionInput {
  title: String
  subtitle: String
  description: String
  image: String
  gallery: String
  yearsOfExperience: String
  experienceLabel: String
  status: String
  publishedAt: DateTime
}

input animated_headlineFilterInput {
  status: String
  publishedAt_gte: DateTime
  publishedAt_lte: DateTime
  search: String
}

input Createanimated_headlineInput {
  textEn: String!
  textAr: String!
  speed: Int
  blackened: Boolean
  status: String
  publishedAt: DateTime
}

input Updateanimated_headlineInput {
  textEn: String
  textAr: String
  speed: Int
  blackened: Boolean
  status: String
  publishedAt: DateTime
}

input awards_sectionFilterInput {
  status: String
  publishedAt_gte: DateTime
  publishedAt_lte: DateTime
  search: String
}

input Createawards_sectionInput {
  titleEn: String
  titleAr: String
  subtitleEn: String
  subtitleAr: String
  awards: String
  status: String
  publishedAt: DateTime
}

input Updateawards_sectionInput {
  titleEn: String
  titleAr: String
  subtitleEn: String
  subtitleAr: String
  awards: String
  status: String
  publishedAt: DateTime
}

input blog_sectionFilterInput {
  status: String
  publishedAt_gte: DateTime
  publishedAt_lte: DateTime
  search: String
}

input Createblog_sectionInput {
  titleEn: String
  titleAr: String
  maxPosts: Int
  showFeaturedOnly: Boolean
  status: String
  publishedAt: DateTime
}

input Updateblog_sectionInput {
  titleEn: String
  titleAr: String
  maxPosts: Int
  showFeaturedOnly: Boolean
  status: String
  publishedAt: DateTime
}

input clients_sectionFilterInput {
  status: String
  publishedAt_gte: DateTime
  publishedAt_lte: DateTime
  search: String
}

input Createclients_sectionInput {
  titleEn: String
  titleAr: String
  subtitleEn: String
  subtitleAr: String
  showLogos: Boolean
  showTestimonials: Boolean
  status: String
  publishedAt: DateTime
}

input Updateclients_sectionInput {
  titleEn: String
  titleAr: String
  subtitleEn: String
  subtitleAr: String
  showLogos: Boolean
  showTestimonials: Boolean
  status: String
  publishedAt: DateTime
}

input company_description_homeFilterInput {
  status: String
  publishedAt_gte: DateTime
  publishedAt_lte: DateTime
  search: String
}

input Createcompany_description_homeInput {
  titleEn: String!
  titleAr: String!
  subtitleEn: String
  subtitleAr: String
  descriptionEn: String!
  descriptionAr: String!
  yearsOfExperience: Int
  experienceLabelEn: String
  experienceLabelAr: String
  imageCount: Int
  showCta: Boolean
  ctaTextEn: String
  ctaTextAr: String
  ctaLink: String
  status: String
  publishedAt: DateTime
}

input Updatecompany_description_homeInput {
  titleEn: String
  titleAr: String
  subtitleEn: String
  subtitleAr: String
  descriptionEn: String
  descriptionAr: String
  yearsOfExperience: Int
  experienceLabelEn: String
  experienceLabelAr: String
  imageCount: Int
  showCta: Boolean
  ctaTextEn: String
  ctaTextAr: String
  ctaLink: String
  status: String
  publishedAt: DateTime
}

input contact_formFilterInput {
  status: String
  publishedAt_gte: DateTime
  publishedAt_lte: DateTime
  search: String
}

input Createcontact_formInput {
  titleEn: String
  titleAr: String
  subtitleEn: String
  subtitleAr: String
  showPhone: Boolean
  showEmail: Boolean
  showAddress: Boolean
  status: String
  publishedAt: DateTime
}

input Updatecontact_formInput {
  titleEn: String
  titleAr: String
  subtitleEn: String
  subtitleAr: String
  showPhone: Boolean
  showEmail: Boolean
  showAddress: Boolean
  status: String
  publishedAt: DateTime
}

input featured_inFilterInput {
  status: String
  publishedAt_gte: DateTime
  publishedAt_lte: DateTime
  search: String
}

input Createfeatured_inInput {
  titleEn: String
  titleAr: String
  logos: String
  status: String
  publishedAt: DateTime
}

input Updatefeatured_inInput {
  titleEn: String
  titleAr: String
  logos: String
  status: String
  publishedAt: DateTime
}

input hero_bannerFilterInput {
  status: String
  publishedAt_gte: DateTime
  publishedAt_lte: DateTime
  search: String
}

input Createhero_bannerInput {
  titleEn: String!
  titleAr: String!
  subtitleEn: String
  subtitleAr: String
  backgroundImage: Asset
  backgroundVideo: String
  ctaTextEn: String
  ctaTextAr: String
  ctaLink: String
  status: String
  publishedAt: DateTime
}

input Updatehero_bannerInput {
  titleEn: String
  titleAr: String
  subtitleEn: String
  subtitleAr: String
  backgroundImage: Asset
  backgroundVideo: String
  ctaTextEn: String
  ctaTextAr: String
  ctaLink: String
  status: String
  publishedAt: DateTime
}

input instagram_sectionFilterInput {
  status: String
  publishedAt_gte: DateTime
  publishedAt_lte: DateTime
  search: String
}

input Createinstagram_sectionInput {
  titleEn: String
  titleAr: String
  username: String
  maxPosts: Int
  status: String
  publishedAt: DateTime
}

input Updateinstagram_sectionInput {
  titleEn: String
  titleAr: String
  username: String
  maxPosts: Int
  status: String
  publishedAt: DateTime
}

input portfolio_display_homeFilterInput {
  status: String
  publishedAt_gte: DateTime
  publishedAt_lte: DateTime
  search: String
}

input Createportfolio_display_homeInput {
  headlineEn: String
  headlineAr: String
  sectionTitleEn: String
  sectionTitleAr: String
  descriptionEn: String
  descriptionAr: String
  projectCountEn: String
  projectCountAr: String
  showFeatured: Boolean
  maxItems: Int
  showCta: Boolean
  ctaTextEn: String
  ctaTextAr: String
  ctaLink: String
  projectsLinkTextEn: String
  projectsLinkTextAr: String
  projectsLink: String
  status: String
  publishedAt: DateTime
}

input Updateportfolio_display_homeInput {
  headlineEn: String
  headlineAr: String
  sectionTitleEn: String
  sectionTitleAr: String
  descriptionEn: String
  descriptionAr: String
  projectCountEn: String
  projectCountAr: String
  showFeatured: Boolean
  maxItems: Int
  showCta: Boolean
  ctaTextEn: String
  ctaTextAr: String
  ctaLink: String
  projectsLinkTextEn: String
  projectsLinkTextAr: String
  projectsLink: String
  status: String
  publishedAt: DateTime
}

input process_sectionFilterInput {
  status: String
  publishedAt_gte: DateTime
  publishedAt_lte: DateTime
  search: String
}

input Createprocess_sectionInput {
  titleEn: String
  titleAr: String
  mainImage: Asset
  smallImage: Asset
  steps: String
  status: String
  publishedAt: DateTime
}

input Updateprocess_sectionInput {
  titleEn: String
  titleAr: String
  mainImage: Asset
  smallImage: Asset
  steps: String
  status: String
  publishedAt: DateTime
}

input separatorFilterInput {
  status: String
  publishedAt_gte: DateTime
  publishedAt_lte: DateTime
  search: String
}

input CreateseparatorInput {
  style: String
  height: Int
  status: String
  publishedAt: DateTime
}

input UpdateseparatorInput {
  style: String
  height: Int
  status: String
  publishedAt: DateTime
}

input services_showcaseFilterInput {
  status: String
  publishedAt_gte: DateTime
  publishedAt_lte: DateTime
  search: String
}

input Createservices_showcaseInput {
  titleEn: String
  titleAr: String
  services: String
  status: String
  publishedAt: DateTime
}

input Updateservices_showcaseInput {
  titleEn: String
  titleAr: String
  services: String
  status: String
  publishedAt: DateTime
}

input stats_sectionFilterInput {
  status: String
  publishedAt_gte: DateTime
  publishedAt_lte: DateTime
  search: String
}

input Createstats_sectionInput {
  titleEn: String
  titleAr: String
  stats: String
  status: String
  publishedAt: DateTime
}

input Updatestats_sectionInput {
  titleEn: String
  titleAr: String
  stats: String
  status: String
  publishedAt: DateTime
}

input text_contentFilterInput {
  status: String
  publishedAt_gte: DateTime
  publishedAt_lte: DateTime
  search: String
}

input Createtext_contentInput {
  title: String!
  subtitle: String
  description: String!
  backgroundImage: String
  status: String
  publishedAt: DateTime
}

input Updatetext_contentInput {
  title: String
  subtitle: String
  description: String
  backgroundImage: String
  status: String
  publishedAt: DateTime
}

# ========================================
# QUERIES
# ========================================

extend type Query {
  # Get all Call to Action Section instances
  CTASections(
    locale: Locale = EN
    filter: CTASectionFilterInput
    limit: Int = 10
    offset: Int = 0
    orderBy: String = "createdAt"
    orderDirection: String = "desc"
  ): [CTASection!]!
  # Get single Call to Action Section by ID
  ctasection(
    id: ID!
    locale: Locale = EN
  ): CTASection
  # Get all Dynamic Form instances
  forms(
    locale: Locale = EN
    filter: FormFilterInput
    limit: Int = 10
    offset: Int = 0
    orderBy: String = "createdAt"
    orderDirection: String = "desc"
  ): [Form!]!
  # Get single Dynamic Form by ID
  form(
    id: ID!
    locale: Locale = EN
  ): Form
  # Get all Hero Banner instances
  HeroBanners(
    locale: Locale = EN
    filter: HeroBannerFilterInput
    limit: Int = 10
    offset: Int = 0
    orderBy: String = "createdAt"
    orderDirection: String = "desc"
  ): [HeroBanner!]!
  # Get single Hero Banner by ID
  herobanner(
    id: ID!
    locale: Locale = EN
  ): HeroBanner
  # Get all Image Gallery instances
  ImageGalleries(
    locale: Locale = EN
    filter: ImageGalleryFilterInput
    limit: Int = 10
    offset: Int = 0
    orderBy: String = "createdAt"
    orderDirection: String = "desc"
  ): [ImageGallery!]!
  # Get single Image Gallery by ID
  imagegallery(
    id: ID!
    locale: Locale = EN
  ): ImageGallery
  # Get all Rich Text instances
  RichTexts(
    locale: Locale = EN
    filter: RichTextFilterInput
    limit: Int = 10
    offset: Int = 0
    orderBy: String = "createdAt"
    orderDirection: String = "desc"
  ): [RichText!]!
  # Get single Rich Text by ID
  richtext(
    id: ID!
    locale: Locale = EN
  ): RichText
  # Get all Video Embed instances
  VideoEmbeds(
    locale: Locale = EN
    filter: VideoEmbedFilterInput
    limit: Int = 10
    offset: Int = 0
    orderBy: String = "createdAt"
    orderDirection: String = "desc"
  ): [VideoEmbed!]!
  # Get single Video Embed by ID
  videoembed(
    id: ID!
    locale: Locale = EN
  ): VideoEmbed
  # Get all About Section instances
  about_sections(
    locale: Locale = EN
    filter: about_sectionFilterInput
    limit: Int = 10
    offset: Int = 0
    orderBy: String = "createdAt"
    orderDirection: String = "desc"
  ): [about_section!]!
  # Get single About Section by ID
  about_section(
    id: ID!
    locale: Locale = EN
  ): about_section
  # Get all Animated Headline instances
  animated_headlines(
    locale: Locale = EN
    filter: animated_headlineFilterInput
    limit: Int = 10
    offset: Int = 0
    orderBy: String = "createdAt"
    orderDirection: String = "desc"
  ): [animated_headline!]!
  # Get single Animated Headline by ID
  animated_headline(
    id: ID!
    locale: Locale = EN
  ): animated_headline
  # Get all Awards & Recognition instances
  awards_sections(
    locale: Locale = EN
    filter: awards_sectionFilterInput
    limit: Int = 10
    offset: Int = 0
    orderBy: String = "createdAt"
    orderDirection: String = "desc"
  ): [awards_section!]!
  # Get single Awards & Recognition by ID
  awards_section(
    id: ID!
    locale: Locale = EN
  ): awards_section
  # Get all Featured Blogs instances
  blog_sections(
    locale: Locale = EN
    filter: blog_sectionFilterInput
    limit: Int = 10
    offset: Int = 0
    orderBy: String = "createdAt"
    orderDirection: String = "desc"
  ): [blog_section!]!
  # Get single Featured Blogs by ID
  blog_section(
    id: ID!
    locale: Locale = EN
  ): blog_section
  # Get all Our Clients instances
  clients_sections(
    locale: Locale = EN
    filter: clients_sectionFilterInput
    limit: Int = 10
    offset: Int = 0
    orderBy: String = "createdAt"
    orderDirection: String = "desc"
  ): [clients_section!]!
  # Get single Our Clients by ID
  clients_section(
    id: ID!
    locale: Locale = EN
  ): clients_section
  # Get all Company Description instances
  company_description_homes(
    locale: Locale = EN
    filter: company_description_homeFilterInput
    limit: Int = 10
    offset: Int = 0
    orderBy: String = "createdAt"
    orderDirection: String = "desc"
  ): [company_description_home!]!
  # Get single Company Description by ID
  company_description_home(
    id: ID!
    locale: Locale = EN
  ): company_description_home
  # Get all Contact Form instances
  contact_forms(
    locale: Locale = EN
    filter: contact_formFilterInput
    limit: Int = 10
    offset: Int = 0
    orderBy: String = "createdAt"
    orderDirection: String = "desc"
  ): [contact_form!]!
  # Get single Contact Form by ID
  contact_form(
    id: ID!
    locale: Locale = EN
  ): contact_form
  # Get all Featured In instances
  featured_ins(
    locale: Locale = EN
    filter: featured_inFilterInput
    limit: Int = 10
    offset: Int = 0
    orderBy: String = "createdAt"
    orderDirection: String = "desc"
  ): [featured_in!]!
  # Get single Featured In by ID
  featured_in(
    id: ID!
    locale: Locale = EN
  ): featured_in
  # Get all Hero Banner instances
  hero_banners(
    locale: Locale = EN
    filter: hero_bannerFilterInput
    limit: Int = 10
    offset: Int = 0
    orderBy: String = "createdAt"
    orderDirection: String = "desc"
  ): [hero_banner!]!
  # Get single Hero Banner by ID
  hero_banner(
    id: ID!
    locale: Locale = EN
  ): hero_banner
  # Get all Instagram Feed instances
  instagram_sections(
    locale: Locale = EN
    filter: instagram_sectionFilterInput
    limit: Int = 10
    offset: Int = 0
    orderBy: String = "createdAt"
    orderDirection: String = "desc"
  ): [instagram_section!]!
  # Get single Instagram Feed by ID
  instagram_section(
    id: ID!
    locale: Locale = EN
  ): instagram_section
  # Get all Portfolio Display instances
  portfolio_display_homes(
    locale: Locale = EN
    filter: portfolio_display_homeFilterInput
    limit: Int = 10
    offset: Int = 0
    orderBy: String = "createdAt"
    orderDirection: String = "desc"
  ): [portfolio_display_home!]!
  # Get single Portfolio Display by ID
  portfolio_display_home(
    id: ID!
    locale: Locale = EN
  ): portfolio_display_home
  # Get all How We Work instances
  process_sections(
    locale: Locale = EN
    filter: process_sectionFilterInput
    limit: Int = 10
    offset: Int = 0
    orderBy: String = "createdAt"
    orderDirection: String = "desc"
  ): [process_section!]!
  # Get single How We Work by ID
  process_section(
    id: ID!
    locale: Locale = EN
  ): process_section
  # Get all Section Separator instances
  separators(
    locale: Locale = EN
    filter: separatorFilterInput
    limit: Int = 10
    offset: Int = 0
    orderBy: String = "createdAt"
    orderDirection: String = "desc"
  ): [separator!]!
  # Get single Section Separator by ID
  separator(
    id: ID!
    locale: Locale = EN
  ): separator
  # Get all Services Showcase instances
  services_showcases(
    locale: Locale = EN
    filter: services_showcaseFilterInput
    limit: Int = 10
    offset: Int = 0
    orderBy: String = "createdAt"
    orderDirection: String = "desc"
  ): [services_showcase!]!
  # Get single Services Showcase by ID
  services_showcase(
    id: ID!
    locale: Locale = EN
  ): services_showcase
  # Get all Key Facts/Statistics instances
  stats_sections(
    locale: Locale = EN
    filter: stats_sectionFilterInput
    limit: Int = 10
    offset: Int = 0
    orderBy: String = "createdAt"
    orderDirection: String = "desc"
  ): [stats_section!]!
  # Get single Key Facts/Statistics by ID
  stats_section(
    id: ID!
    locale: Locale = EN
  ): stats_section
  # Get all Text Content instances
  text_contents(
    locale: Locale = EN
    filter: text_contentFilterInput
    limit: Int = 10
    offset: Int = 0
    orderBy: String = "createdAt"
    orderDirection: String = "desc"
  ): [text_content!]!
  # Get single Text Content by ID
  text_content(
    id: ID!
    locale: Locale = EN
  ): text_content

  # Blueprint metadata
  blueprints: [ContentBlueprint!]!
  blueprint(id: ID!): ContentBlueprint
}

# ========================================
# MUTATIONS
# ========================================

extend type Mutation {
  # Create new Call to Action Section
  createCTASection(
    input: CreateCTASectionInput!
    locale: Locale = EN
  ): CTASection!
  # Update existing Call to Action Section
  updateCTASection(
    id: ID!
    input: UpdateCTASectionInput!
    locale: Locale = EN
  ): CTASection!
  # Delete Call to Action Section
  deleteCTASection(id: ID!): Boolean!
  # Duplicate Call to Action Section
  duplicateCTASection(id: ID!): CTASection!
  # Create new Dynamic Form
  createForm(
    input: CreateFormInput!
    locale: Locale = EN
  ): Form!
  # Update existing Dynamic Form
  updateForm(
    id: ID!
    input: UpdateFormInput!
    locale: Locale = EN
  ): Form!
  # Delete Dynamic Form
  deleteForm(id: ID!): Boolean!
  # Duplicate Dynamic Form
  duplicateForm(id: ID!): Form!
  # Create new Hero Banner
  createHeroBanner(
    input: CreateHeroBannerInput!
    locale: Locale = EN
  ): HeroBanner!
  # Update existing Hero Banner
  updateHeroBanner(
    id: ID!
    input: UpdateHeroBannerInput!
    locale: Locale = EN
  ): HeroBanner!
  # Delete Hero Banner
  deleteHeroBanner(id: ID!): Boolean!
  # Duplicate Hero Banner
  duplicateHeroBanner(id: ID!): HeroBanner!
  # Create new Image Gallery
  createImageGallery(
    input: CreateImageGalleryInput!
    locale: Locale = EN
  ): ImageGallery!
  # Update existing Image Gallery
  updateImageGallery(
    id: ID!
    input: UpdateImageGalleryInput!
    locale: Locale = EN
  ): ImageGallery!
  # Delete Image Gallery
  deleteImageGallery(id: ID!): Boolean!
  # Duplicate Image Gallery
  duplicateImageGallery(id: ID!): ImageGallery!
  # Create new Rich Text
  createRichText(
    input: CreateRichTextInput!
    locale: Locale = EN
  ): RichText!
  # Update existing Rich Text
  updateRichText(
    id: ID!
    input: UpdateRichTextInput!
    locale: Locale = EN
  ): RichText!
  # Delete Rich Text
  deleteRichText(id: ID!): Boolean!
  # Duplicate Rich Text
  duplicateRichText(id: ID!): RichText!
  # Create new Video Embed
  createVideoEmbed(
    input: CreateVideoEmbedInput!
    locale: Locale = EN
  ): VideoEmbed!
  # Update existing Video Embed
  updateVideoEmbed(
    id: ID!
    input: UpdateVideoEmbedInput!
    locale: Locale = EN
  ): VideoEmbed!
  # Delete Video Embed
  deleteVideoEmbed(id: ID!): Boolean!
  # Duplicate Video Embed
  duplicateVideoEmbed(id: ID!): VideoEmbed!
  # Create new About Section
  createabout_section(
    input: Createabout_sectionInput!
    locale: Locale = EN
  ): about_section!
  # Update existing About Section
  updateabout_section(
    id: ID!
    input: Updateabout_sectionInput!
    locale: Locale = EN
  ): about_section!
  # Delete About Section
  deleteabout_section(id: ID!): Boolean!
  # Duplicate About Section
  duplicateabout_section(id: ID!): about_section!
  # Create new Animated Headline
  createanimated_headline(
    input: Createanimated_headlineInput!
    locale: Locale = EN
  ): animated_headline!
  # Update existing Animated Headline
  updateanimated_headline(
    id: ID!
    input: Updateanimated_headlineInput!
    locale: Locale = EN
  ): animated_headline!
  # Delete Animated Headline
  deleteanimated_headline(id: ID!): Boolean!
  # Duplicate Animated Headline
  duplicateanimated_headline(id: ID!): animated_headline!
  # Create new Awards & Recognition
  createawards_section(
    input: Createawards_sectionInput!
    locale: Locale = EN
  ): awards_section!
  # Update existing Awards & Recognition
  updateawards_section(
    id: ID!
    input: Updateawards_sectionInput!
    locale: Locale = EN
  ): awards_section!
  # Delete Awards & Recognition
  deleteawards_section(id: ID!): Boolean!
  # Duplicate Awards & Recognition
  duplicateawards_section(id: ID!): awards_section!
  # Create new Featured Blogs
  createblog_section(
    input: Createblog_sectionInput!
    locale: Locale = EN
  ): blog_section!
  # Update existing Featured Blogs
  updateblog_section(
    id: ID!
    input: Updateblog_sectionInput!
    locale: Locale = EN
  ): blog_section!
  # Delete Featured Blogs
  deleteblog_section(id: ID!): Boolean!
  # Duplicate Featured Blogs
  duplicateblog_section(id: ID!): blog_section!
  # Create new Our Clients
  createclients_section(
    input: Createclients_sectionInput!
    locale: Locale = EN
  ): clients_section!
  # Update existing Our Clients
  updateclients_section(
    id: ID!
    input: Updateclients_sectionInput!
    locale: Locale = EN
  ): clients_section!
  # Delete Our Clients
  deleteclients_section(id: ID!): Boolean!
  # Duplicate Our Clients
  duplicateclients_section(id: ID!): clients_section!
  # Create new Company Description
  createcompany_description_home(
    input: Createcompany_description_homeInput!
    locale: Locale = EN
  ): company_description_home!
  # Update existing Company Description
  updatecompany_description_home(
    id: ID!
    input: Updatecompany_description_homeInput!
    locale: Locale = EN
  ): company_description_home!
  # Delete Company Description
  deletecompany_description_home(id: ID!): Boolean!
  # Duplicate Company Description
  duplicatecompany_description_home(id: ID!): company_description_home!
  # Create new Contact Form
  createcontact_form(
    input: Createcontact_formInput!
    locale: Locale = EN
  ): contact_form!
  # Update existing Contact Form
  updatecontact_form(
    id: ID!
    input: Updatecontact_formInput!
    locale: Locale = EN
  ): contact_form!
  # Delete Contact Form
  deletecontact_form(id: ID!): Boolean!
  # Duplicate Contact Form
  duplicatecontact_form(id: ID!): contact_form!
  # Create new Featured In
  createfeatured_in(
    input: Createfeatured_inInput!
    locale: Locale = EN
  ): featured_in!
  # Update existing Featured In
  updatefeatured_in(
    id: ID!
    input: Updatefeatured_inInput!
    locale: Locale = EN
  ): featured_in!
  # Delete Featured In
  deletefeatured_in(id: ID!): Boolean!
  # Duplicate Featured In
  duplicatefeatured_in(id: ID!): featured_in!
  # Create new Hero Banner
  createhero_banner(
    input: Createhero_bannerInput!
    locale: Locale = EN
  ): hero_banner!
  # Update existing Hero Banner
  updatehero_banner(
    id: ID!
    input: Updatehero_bannerInput!
    locale: Locale = EN
  ): hero_banner!
  # Delete Hero Banner
  deletehero_banner(id: ID!): Boolean!
  # Duplicate Hero Banner
  duplicatehero_banner(id: ID!): hero_banner!
  # Create new Instagram Feed
  createinstagram_section(
    input: Createinstagram_sectionInput!
    locale: Locale = EN
  ): instagram_section!
  # Update existing Instagram Feed
  updateinstagram_section(
    id: ID!
    input: Updateinstagram_sectionInput!
    locale: Locale = EN
  ): instagram_section!
  # Delete Instagram Feed
  deleteinstagram_section(id: ID!): Boolean!
  # Duplicate Instagram Feed
  duplicateinstagram_section(id: ID!): instagram_section!
  # Create new Portfolio Display
  createportfolio_display_home(
    input: Createportfolio_display_homeInput!
    locale: Locale = EN
  ): portfolio_display_home!
  # Update existing Portfolio Display
  updateportfolio_display_home(
    id: ID!
    input: Updateportfolio_display_homeInput!
    locale: Locale = EN
  ): portfolio_display_home!
  # Delete Portfolio Display
  deleteportfolio_display_home(id: ID!): Boolean!
  # Duplicate Portfolio Display
  duplicateportfolio_display_home(id: ID!): portfolio_display_home!
  # Create new How We Work
  createprocess_section(
    input: Createprocess_sectionInput!
    locale: Locale = EN
  ): process_section!
  # Update existing How We Work
  updateprocess_section(
    id: ID!
    input: Updateprocess_sectionInput!
    locale: Locale = EN
  ): process_section!
  # Delete How We Work
  deleteprocess_section(id: ID!): Boolean!
  # Duplicate How We Work
  duplicateprocess_section(id: ID!): process_section!
  # Create new Section Separator
  createseparator(
    input: CreateseparatorInput!
    locale: Locale = EN
  ): separator!
  # Update existing Section Separator
  updateseparator(
    id: ID!
    input: UpdateseparatorInput!
    locale: Locale = EN
  ): separator!
  # Delete Section Separator
  deleteseparator(id: ID!): Boolean!
  # Duplicate Section Separator
  duplicateseparator(id: ID!): separator!
  # Create new Services Showcase
  createservices_showcase(
    input: Createservices_showcaseInput!
    locale: Locale = EN
  ): services_showcase!
  # Update existing Services Showcase
  updateservices_showcase(
    id: ID!
    input: Updateservices_showcaseInput!
    locale: Locale = EN
  ): services_showcase!
  # Delete Services Showcase
  deleteservices_showcase(id: ID!): Boolean!
  # Duplicate Services Showcase
  duplicateservices_showcase(id: ID!): services_showcase!
  # Create new Key Facts/Statistics
  createstats_section(
    input: Createstats_sectionInput!
    locale: Locale = EN
  ): stats_section!
  # Update existing Key Facts/Statistics
  updatestats_section(
    id: ID!
    input: Updatestats_sectionInput!
    locale: Locale = EN
  ): stats_section!
  # Delete Key Facts/Statistics
  deletestats_section(id: ID!): Boolean!
  # Duplicate Key Facts/Statistics
  duplicatestats_section(id: ID!): stats_section!
  # Create new Text Content
  createtext_content(
    input: Createtext_contentInput!
    locale: Locale = EN
  ): text_content!
  # Update existing Text Content
  updatetext_content(
    id: ID!
    input: Updatetext_contentInput!
    locale: Locale = EN
  ): text_content!
  # Delete Text Content
  deletetext_content(id: ID!): Boolean!
  # Duplicate Text Content
  duplicatetext_content(id: ID!): text_content!
}

# ========================================
# BLUEPRINT METADATA TYPE
# ========================================

type ContentBlueprint {
  id: ID!
  name: String!
  displayName: String!
  description: String
  blueprintType: BlueprintType!
  allowMultiple: Boolean!
  isSystem: Boolean!
  icon: String
  category: String!
  fields: JSON!
  createdAt: DateTime!
  updatedAt: DateTime!
}
