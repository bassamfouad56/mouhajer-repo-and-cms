generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String        @id @default(uuid())
  name          String
  email         String        @unique
  password      String
  role          String        @default("editor")
  avatar        String?
  active        Boolean       @default(true)
  lastLoginAt   DateTime?     @map("last_login_at")
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @updatedAt @map("updated_at")
  activityLogs  ActivityLog[]
  crmActivities CrmActivity[]

  @@index([email])
  @@index([role])
  @@index([active])
  @@map("users")
}

model ActivityLog {
  id         String   @id @default(uuid())
  userId     String   @map("user_id")
  action     String
  resource   String
  resourceId String?  @map("resource_id")
  details    Json?
  ipAddress  String?  @map("ip_address")
  userAgent  String?  @map("user_agent")
  createdAt  DateTime @default(now()) @map("created_at")
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([action])
  @@index([resource])
  @@index([createdAt])
  @@map("activity_logs")
}

model Project {
  id            String   @id @default(uuid())
  titleEn       String   @map("title_en")
  titleAr       String   @map("title_ar")
  descriptionEn String   @map("description_en")
  descriptionAr String   @map("description_ar")
  images        String[]
  category      String
  featured      Boolean  @default(false)
  status        String   @default("published")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  @@index([featured])
  @@index([category])
  @@index([status])
  @@map("projects")
}

model Service {
  id                 String   @id @default(uuid())
  titleEn            String   @map("title_en")
  titleAr            String   @map("title_ar")
  descriptionEn      String   @map("description_en")
  descriptionAr      String   @map("description_ar")
  shortDescriptionEn String   @map("short_description_en")
  shortDescriptionAr String   @map("short_description_ar")
  icon               String?
  featuresEn         String[] @map("features_en")
  featuresAr         String[] @map("features_ar")
  price              String?
  duration           String?
  featured           Boolean  @default(false)
  status             String   @default("published")
  createdAt          DateTime @default(now()) @map("created_at")
  updatedAt          DateTime @updatedAt @map("updated_at")
  averageRating      Float?   @map("average_rating")
  faqs               Json?
  images             String[]
  relatedServiceIds  String[] @map("related_service_ids")
  seoKeywordsAr      String[] @map("seo_keywords_ar")
  seoKeywordsEn      String[] @map("seo_keywords_en")
  seoMetaDescAr      String?  @map("seo_meta_desc_ar")
  seoMetaDescEn      String?  @map("seo_meta_desc_en")
  seoMetaTitleAr     String?  @map("seo_meta_title_ar")
  seoMetaTitleEn     String?  @map("seo_meta_title_en")
  serviceArea        String[] @map("service_area")
  slugAr             String?  @unique @map("slug_ar")
  slugEn             String?  @unique @map("slug_en")
  targetLocations    String[] @map("target_locations")
  viewCount          Int      @default(0) @map("view_count")

  @@index([slugEn])
  @@index([slugAr])
  @@index([featured])
  @@index([status])
  @@index([targetLocations])
  @@map("services")
}

model BlogPost {
  id            String    @id @default(uuid())
  titleEn       String    @map("title_en")
  titleAr       String    @map("title_ar")
  slugEn        String    @unique @map("slug_en")
  slugAr        String    @unique @map("slug_ar")
  excerptEn     String    @map("excerpt_en")
  excerptAr     String    @map("excerpt_ar")
  contentEn     String    @map("content_en")
  contentAr     String    @map("content_ar")
  featuredImage String?   @map("featured_image")
  category      String?
  tags          String[]
  author        String?
  publishedAt   DateTime? @map("published_at")
  featured      Boolean   @default(false)
  status        String    @default("draft")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  @@index([slugEn])
  @@index([slugAr])
  @@index([featured])
  @@index([status])
  @@index([category])
  @@map("blog_posts")
}

model Page {
  id             String      @id @default(uuid())
  titleEn        String      @map("title_en")
  titleAr        String      @map("title_ar")
  slugEn         String      @unique @map("slug_en")
  slugAr         String      @unique @map("slug_ar")
  descriptionEn  String      @map("description_en")
  descriptionAr  String      @map("description_ar")

  // UNIFIED CONTENT MODEL - Phase 1
  type           String      @default("normal") @map("type") // normal, blog, project, service, custom
  category       String?     @map("category") // Optional categorization (e.g., "villa", "apartment", "commercial")
  template       String?     @map("template") // Optional template override (e.g., "portfolio", "case-study")
  publishedAt    DateTime?   @map("published_at") // When published (null = not published yet)

  // Basic SEO
  seoMetaTitleEn String?     @map("seo_meta_title_en")
  seoMetaTitleAr String?     @map("seo_meta_title_ar")
  seoMetaDescEn  String?     @map("seo_meta_desc_en")
  seoMetaDescAr  String?     @map("seo_meta_desc_ar")
  seoKeywords    String[]    @map("seo_keywords")
  canonicalUrl   String?     @map("canonical_url")
  metaRobots     String?     @default("index, follow") @map("meta_robots")

  // Open Graph
  ogTitle        String?     @map("og_title")
  ogDescription  String?     @map("og_description")
  ogImage        String?     @map("og_image")
  ogType         String?     @default("website") @map("og_type")
  ogUrl          String?     @map("og_url")

  // Twitter Cards
  twitterCard    String?     @default("summary_large_image") @map("twitter_card")
  twitterTitle   String?     @map("twitter_title")
  twitterDescription String? @map("twitter_description")
  twitterImage   String?     @map("twitter_image")

  // Structured Data
  schemaType     String?     @default("WebPage") @map("schema_type")
  schemaData     Json?       @map("schema_data")

  status         String      @default("draft")
  featured       Boolean     @default(false)
  createdAt      DateTime    @default(now()) @map("created_at")
  updatedAt      DateTime    @updatedAt @map("updated_at")
  parentId       String?     @map("parent_id")

  // Relations
  blocks         PageBlock[]
  components     BlueprintInstance[] // NEW: Blueprint-based components
  parent         Page?       @relation("PageChildren", fields: [parentId], references: [id])
  children       Page[]      @relation("PageChildren")

  @@index([slugEn])
  @@index([slugAr])
  @@index([status])
  @@index([featured])
  @@index([parentId])
  @@index([type])
  @@index([category])
  @@index([publishedAt])
  @@map("pages")
}

model PageBlock {
  id        String   @id @default(uuid())
  pageId    String   @map("page_id")
  type      String
  data      Json
  order     Int      @default(0)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  page      Page     @relation(fields: [pageId], references: [id], onDelete: Cascade)

  @@index([pageId])
  @@index([order])
  @@map("page_blocks")
}

// ========================================
// BLUEPRINT SYSTEM (Caisy.io-style CMS)
// ========================================

enum BlueprintType {
  DOCUMENT  // Top-level queryable content (Pages, Posts, Projects)
  COMPONENT // Reusable blocks (Hero, Gallery, CTA)
}

model ContentBlueprint {
  id              String        @id @default(uuid())
  name            String        @unique // "BlogPost", "HeroBanner", "ImageGallery"
  displayName     String        @map("display_name") // "Blog Post", "Hero Banner"
  description     String?

  // Blueprint configuration
  blueprintType   BlueprintType @default(COMPONENT) @map("blueprint_type")
  allowMultiple   Boolean       @default(true) @map("allow_multiple") // Single instance or multiple
  isSystem        Boolean       @default(false) @map("is_system") // Protected system blueprints

  // Visual
  icon            String?       // Lucide icon name
  thumbnailUrl    String?       @map("thumbnail_url")
  category        String        @default("general") // "layout", "media", "content", "custom"

  // Field definitions (JSON schema)
  fields          Json          // Array<FieldDefinition>

  // Preview
  previewData     Json?         @map("preview_data")
  previewTemplate String?       @map("preview_template")

  // Metadata
  createdAt       DateTime      @default(now()) @map("created_at")
  updatedAt       DateTime      @updatedAt @map("updated_at")
  createdBy       String?       @map("created_by")

  // Relations
  instances       BlueprintInstance[]
  contentSections ContentSection[]

  @@index([blueprintType])
  @@index([category])
  @@index([isSystem])
  @@index([name])
  @@map("content_blueprints")
}

// Global Components for Layout (Navbar, Footer, etc.)
model GlobalComponent {
  id            String   @id @default(uuid())
  type          String   @unique // "navbar", "footer", "sidebar", "announcement", etc.
  displayName   String   @map("display_name")

  // Component data for each language
  dataEn        Json     @map("data_en")
  dataAr        Json     @map("data_ar")

  // Visibility
  enabled       Boolean  @default(true)

  // Metadata
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  @@index([type])
  @@index([enabled])
  @@map("global_components")
}

model BlueprintInstance {
  id              String   @id @default(uuid())
  blueprintId     String   @map("blueprint_id")

  // Document instances are standalone (pageId = null)
  // Component instances attach to pages
  pageId          String?  @map("page_id")

  // Locale-specific data
  dataEn          Json     @map("data_en")
  dataAr          Json     @map("data_ar")

  // Ordering (for components on a page)
  order           Int      @default(0)

  // Publishing
  status          String   @default("draft")
  publishedAt     DateTime? @map("published_at")

  // Metadata
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  // Relations
  blueprint       ContentBlueprint @relation(fields: [blueprintId], references: [id], onDelete: Cascade)
  page            Page?            @relation(fields: [pageId], references: [id], onDelete: Cascade)

  @@index([blueprintId])
  @@index([pageId])
  @@index([order])
  @@index([status])
  @@map("blueprint_instances")
}

// ========================================
// FORM SUBMISSION SYSTEM
// ========================================

model FormSubmission {
  id            String   @id @default(uuid())

  // Form reference
  formId        String   @map("form_id")
  formName      String   @map("form_name") // Denormalized for easier querying

  // Submission data (stores all form field values as JSON)
  data          Json

  // Metadata
  locale        String   @default("en") // Language of submission
  ipAddress     String?  @map("ip_address")
  userAgent     String?  @map("user_agent")

  // Status
  status        String   @default("new") // new, read, archived, spam
  notes         String?  // Admin notes

  // Timestamps
  submittedAt   DateTime @default(now()) @map("submitted_at")
  readAt        DateTime? @map("read_at")

  @@index([formId])
  @@index([formName])
  @@index([status])
  @@index([submittedAt])
  @@map("form_submissions")
}

// ========================================
// UNIFIED CONTENT SYSTEM
// ========================================

enum ContentType {
  PAGE
  BLOG
  PROJECT
  SERVICE
  LANDING
}

enum ContentStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

model Content {
  id              String          @id @default(uuid())

  // Type & Template
  type            ContentType
  template        String?         // Template ID from content-templates.ts

  // Bilingual Core Fields
  titleEn         String          @map("title_en")
  titleAr         String          @map("title_ar")
  slugEn          String          @unique @map("slug_en")
  slugAr          String          @unique @map("slug_ar")
  descriptionEn   String          @default("") @map("description_en")
  descriptionAr   String          @default("") @map("description_ar")

  // Publishing
  status          ContentStatus   @default(DRAFT)
  featured        Boolean         @default(false)
  publishedAt     DateTime?       @map("published_at")

  // SEO (simplified - inherit from template)
  seoMetaTitleEn  String?         @map("seo_meta_title_en")
  seoMetaTitleAr  String?         @map("seo_meta_title_ar")
  seoMetaDescEn   String?         @map("seo_meta_desc_en")
  seoMetaDescAr   String?         @map("seo_meta_desc_ar")
  seoKeywords     String[]        @map("seo_keywords")

  // Metadata
  createdAt       DateTime        @default(now()) @map("created_at")
  updatedAt       DateTime        @updatedAt @map("updated_at")
  createdBy       String?         @map("created_by")

  // Relations
  sections        ContentSection[]

  @@index([type])
  @@index([status])
  @@index([slugEn])
  @@index([slugAr])
  @@index([featured])
  @@index([publishedAt])
  @@map("contents")
}

model ContentSection {
  id              String   @id @default(uuid())
  contentId       String   @map("content_id")
  blueprintId     String   @map("blueprint_id")

  // Position
  order           Int      @default(0)

  // Bilingual Data
  dataEn          Json     @map("data_en")
  dataAr          Json     @map("data_ar")

  // Visibility
  visible         Boolean  @default(true)

  // Metadata
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  // Relations
  content         Content  @relation(fields: [contentId], references: [id], onDelete: Cascade)
  blueprint       ContentBlueprint @relation(fields: [blueprintId], references: [id])

  @@index([contentId])
  @@index([blueprintId])
  @@index([order])
  @@map("content_sections")
}

model MediaFile {
  id           String   @id @default(uuid())
  filename     String
  originalName String   @map("original_name")
  url          String   @unique
  thumbnailUrl String?  @map("thumbnail_url")
  mimeType     String   @map("mime_type")
  size         Int
  width        Int?
  height       Int?
  alt          String?
  type         String
  uploadedAt   DateTime @default(now()) @map("uploaded_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  tags         String[] @default([])

  @@index([type])
  @@index([mimeType])
  @@map("media_files")
}

model Settings {
  id                   String   @id @default("default")
  siteNameEn           String   @map("site_name_en")
  siteNameAr           String   @map("site_name_ar")
  siteDescriptionEn    String   @map("site_description_en")
  siteDescriptionAr    String   @map("site_description_ar")
  contactEmail         String?  @map("contact_email")
  contactPhone         String?  @map("contact_phone")
  contactAddressEn     String?  @map("contact_address_en")
  contactAddressAr     String?  @map("contact_address_ar")
  socialFacebook       String?  @map("social_facebook")
  socialInstagram      String?  @map("social_instagram")
  socialTwitter        String?  @map("social_twitter")
  socialLinkedin       String?  @map("social_linkedin")
  socialYoutube        String?  @map("social_youtube")
  seoMetaTitleEn       String?  @map("seo_meta_title_en")
  seoMetaTitleAr       String?  @map("seo_meta_title_ar")
  seoMetaDescriptionEn String?  @map("seo_meta_description_en")
  seoMetaDescriptionAr String?  @map("seo_meta_description_ar")
  seoKeywords          String[] @map("seo_keywords")
  primaryColor         String?  @map("primary_color")
  logoUrl              String?  @map("logo_url")
  faviconUrl           String?  @map("favicon_url")
  updatedAt            DateTime @updatedAt @map("updated_at")

  @@map("settings")
}

model Advertisement {
  id              String   @id @default(uuid())
  titleEn         String   @map("title_en")
  titleAr         String   @map("title_ar")
  descriptionEn   String?  @map("description_en")
  descriptionAr   String?  @map("description_ar")
  image           String?
  videoUrl        String?  @map("video_url")
  linkUrl         String   @map("link_url")
  ctaTextEn       String?  @map("cta_text_en")
  ctaTextAr       String?  @map("cta_text_ar")
  zone            String
  type            String
  htmlContentEn   String?  @map("html_content_en")
  htmlContentAr   String?  @map("html_content_ar")
  startDate       DateTime @map("start_date")
  endDate         DateTime @map("end_date")
  alwaysActive    Boolean  @default(false) @map("always_active")
  pages           String[]
  showOnAllPages  Boolean  @default(false) @map("show_on_all_pages")
  priority        Int      @default(0)
  clickCount      Int      @default(0) @map("click_count")
  impressionCount Int      @default(0) @map("impression_count")
  maxImpressions  Int?     @map("max_impressions")
  active          Boolean  @default(true)
  featured        Boolean  @default(false)
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  @@index([zone])
  @@index([active])
  @@index([featured])
  @@index([priority])
  @@index([startDate, endDate])
  @@map("advertisements")
}

model NavItem {
  id              String    @id @default(uuid())
  labelEn         String    @map("label_en")
  labelAr         String    @map("label_ar")
  url             String?
  type            String
  location        String    @default("header") // "header" or "footer"
  icon            String?
  target          String    @default("_self")
  parentId        String?   @map("parent_id")
  order           Int       @default(0)
  isActive        Boolean   @default(true) @map("is_active")
  openInNewTab    Boolean   @default(false) @map("open_in_new_tab")
  cssClass        String?   @map("css_class")
  badge           String?
  badgeColor      String?   @map("badge_color")
  description     String?
  megaMenuColumns Int?      @map("mega_menu_columns")
  megaMenuImage   String?   @map("mega_menu_image")
  requiresAuth    Boolean   @default(false) @map("requires_auth")
  requiredRoles   String[]  @default([]) @map("required_roles")
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")
  parent          NavItem?  @relation("NavItemChildren", fields: [parentId], references: [id], onDelete: Cascade)
  children        NavItem[] @relation("NavItemChildren")

  @@index([parentId])
  @@index([order])
  @@index([isActive])
  @@index([type])
  @@index([location])
  @@map("nav_items")
}

model ProjectHandoff {
  id                   String    @id @default(uuid())
  projectId            String    @unique @map("project_id")
  completionDate       DateTime? @map("completion_date")
  duration             String?
  clientName           String?   @map("client_name")
  clientCompany        String?   @map("client_company")
  clientTestimonialEn  String?   @map("client_testimonial_en")
  clientTestimonialAr  String?   @map("client_testimonial_ar")
  clientRating         Int?      @map("client_rating")
  useClientName        Boolean   @default(false) @map("use_client_name")
  useClientPhotos      Boolean   @default(true) @map("use_client_photos")
  allowReference       Boolean   @default(false) @map("allow_reference")
  uniqueFeaturesEn     String?   @map("unique_features_en")
  uniqueFeaturesAr     String?   @map("unique_features_ar")
  awards               String[]  @default([])
  beforePhotos         String[]  @default([]) @map("before_photos")
  videoLinks           String[]  @default([]) @map("video_links")
  targetKeywords       String[]  @default([]) @map("target_keywords")
  targetAudience       String[]  @default([]) @map("target_audience")
  geographicFocus      String[]  @default([]) @map("geographic_focus")
  status               String    @default("draft")
  submittedBy          String?   @map("submitted_by")
  submittedAt          DateTime? @map("submitted_at")
  approvedBy           String?   @map("approved_by")
  approvedAt           DateTime? @map("approved_at")
  notes                String?
  createdAt            DateTime  @default(now()) @map("created_at")
  updatedAt            DateTime  @updatedAt @map("updated_at")
  afterPhotos          String[]  @default([]) @map("after_photos")
  figmaLinks           String[]  @default([]) @map("figma_links")
  keySellingPoints     String[]  @default([]) @map("key_selling_points")
  liveUrl              String?   @map("live_url")
  measurableResults    String[]  @default([]) @map("measurable_results")
  performanceMetrics   Json?     @map("performance_metrics")
  pressMentions        String[]  @default([]) @map("press_mentions")
  problemStatementAr   String?   @map("problem_statement_ar")
  problemStatementEn   String?   @map("problem_statement_en")
  projectHighlightsAr  String[]  @default([]) @map("project_highlights_ar")
  projectHighlightsEn  String[]  @default([]) @map("project_highlights_en")
  recommendedPlatforms String[]  @default([]) @map("recommended_platforms")
  repositoryUrl        String?   @map("repository_url")
  screenshots          String[]  @default([])
  seoMetaDescAr        String?   @map("seo_meta_desc_ar")
  seoMetaDescEn        String?   @map("seo_meta_desc_en")
  solutionApproachAr   String?   @map("solution_approach_ar")
  solutionApproachEn   String?   @map("solution_approach_en")
  teamCredits          String[]  @default([]) @map("team_credits")
  techStack            String[]  @default([]) @map("tech_stack")

  @@index([projectId])
  @@index([status])
  @@index([submittedBy])
  @@index([approvedBy])
  @@map("project_handoffs")
}

model Company {
  id         String    @id @default(uuid())
  nameEn     String    @map("name_en")
  nameAr     String?   @map("name_ar")
  industry   String?
  size       String?
  website    String?
  logo       String?
  email      String?
  phone      String?
  whatsapp   String?
  addressEn  String?   @map("address_en")
  addressAr  String?   @map("address_ar")
  city       String?
  area       String?
  country    String    @default("UAE")
  type       String    @default("client")
  vip        Boolean   @default(false)
  tags       String[]  @default([])
  linkedin   String?
  instagram  String?
  facebook   String?
  notesEn    String?   @map("notes_en")
  notesAr    String?   @map("notes_ar")
  assignedTo String?   @map("assigned_to")
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @updatedAt @map("updated_at")
  contacts   Contact[]
  deals      Deal[]
  leads      Lead[]

  @@index([city])
  @@index([type])
  @@index([vip])
  @@index([assignedTo])
  @@map("companies")
}

model Contact {
  id                String        @id @default(uuid())
  firstName         String        @map("first_name")
  lastName          String        @map("last_name")
  fullNameAr        String?       @map("full_name_ar")
  email             String?
  phone             String
  whatsapp          String?
  companyId         String?       @map("company_id")
  position          String?
  addressEn         String?       @map("address_en")
  addressAr         String?       @map("address_ar")
  city              String?
  area              String?
  country           String        @default("UAE")
  type              String        @default("individual")
  status            String        @default("active")
  source            String?
  vip               Boolean       @default(false)
  tags              String[]      @default([])
  preferredStyle    String[]      @default([]) @map("preferred_style")
  budgetRange       String?       @map("budget_range")
  projectType       String[]      @default([]) @map("project_type")
  propertySize      String?       @map("property_size")
  timeline          String?
  linkedin          String?
  instagram         String?
  facebook          String?
  preferredLanguage String        @default("en") @map("preferred_language")
  notesEn           String?       @map("notes_en")
  notesAr           String?       @map("notes_ar")
  assignedTo        String?       @map("assigned_to")
  createdAt         DateTime      @default(now()) @map("created_at")
  updatedAt         DateTime      @updatedAt @map("updated_at")
  lastContactedAt   DateTime?     @map("last_contacted_at")
  company           Company?      @relation(fields: [companyId], references: [id])
  activities        CrmActivity[]
  deals             Deal[]
  tasks             Task[]

  @@index([email])
  @@index([phone])
  @@index([companyId])
  @@index([type])
  @@index([status])
  @@index([vip])
  @@index([assignedTo])
  @@index([city])
  @@index([source])
  @@map("contacts")
}

model Lead {
  id                 String        @id @default(uuid())
  name               String
  email              String?
  phone              String
  companyId          String?       @map("company_id")
  companyName        String?       @map("company_name")
  source             String
  status             String        @default("new")
  score              Int           @default(0)
  projectType        String        @map("project_type")
  budgetRange        String?       @map("budget_range")
  propertySize       String?       @map("property_size")
  timeline           String?
  city               String?
  area               String?
  interestedIn       String[]      @default([]) @map("interested_in")
  stylePreference    String[]      @default([]) @map("style_preference")
  message            String?
  notesEn            String?       @map("notes_en")
  notesAr            String?       @map("notes_ar")
  qualified          Boolean       @default(false)
  qualifiedAt        DateTime?     @map("qualified_at")
  disqualifiedReason String?       @map("disqualified_reason")
  nextFollowUpDate   DateTime?     @map("next_follow_up_date")
  lastContactedAt    DateTime?     @map("last_contacted_at")
  convertedToContact Boolean       @default(false) @map("converted_to_contact")
  convertedToDeal    Boolean       @default(false) @map("converted_to_deal")
  convertedAt        DateTime?     @map("converted_at")
  assignedTo         String?       @map("assigned_to")
  locale             String?       @default("en")
  createdAt          DateTime      @default(now()) @map("created_at")
  updatedAt          DateTime      @updatedAt @map("updated_at")
  activities         CrmActivity[]
  company            Company?      @relation(fields: [companyId], references: [id])
  tasks              Task[]

  @@index([status])
  @@index([source])
  @@index([qualified])
  @@index([assignedTo])
  @@index([score])
  @@index([createdAt])
  @@index([nextFollowUpDate])
  @@map("leads")
}

model Deal {
  id                String        @id @default(uuid())
  titleEn           String        @map("title_en")
  titleAr           String?       @map("title_ar")
  contactId         String        @map("contact_id")
  companyId         String?       @map("company_id")
  value             Float
  currency          String        @default("AED")
  stage             String
  probability       Int           @default(50)
  source            String?
  projectType       String        @map("project_type")
  propertySize      String?       @map("property_size")
  location          String?
  city              String?
  area              String?
  expectedCloseDate DateTime?     @map("expected_close_date")
  actualCloseDate   DateTime?     @map("actual_close_date")
  wonReason         String?       @map("won_reason")
  lostReason        String?       @map("lost_reason")
  competitors       String[]      @default([])
  notesEn           String?       @map("notes_en")
  notesAr           String?       @map("notes_ar")
  quotationIds      String[]      @default([]) @map("quotation_ids")
  proposalIds       String[]      @default([]) @map("proposal_ids")
  contractIds       String[]      @default([]) @map("contract_ids")
  assignedTo        String?       @map("assigned_to")
  tags              String[]      @default([])
  createdAt         DateTime      @default(now()) @map("created_at")
  updatedAt         DateTime      @updatedAt @map("updated_at")
  activities        CrmActivity[]
  company           Company?      @relation(fields: [companyId], references: [id])
  contact           Contact       @relation(fields: [contactId], references: [id], onDelete: Cascade)
  tasks             Task[]

  @@index([contactId])
  @@index([companyId])
  @@index([stage])
  @@index([assignedTo])
  @@index([expectedCloseDate])
  @@index([createdAt])
  @@map("deals")
}

model Task {
  id              String    @id @default(uuid())
  title           String
  description     String?
  type            String
  relatedTo       String    @map("related_to")
  relatedId       String    @map("related_id")
  leadId          String?   @map("lead_id")
  contactId       String?   @map("contact_id")
  dealId          String?   @map("deal_id")
  assignedTo      String    @map("assigned_to")
  dueDate         DateTime  @map("due_date")
  dueTime         String?   @map("due_time")
  completedAt     DateTime? @map("completed_at")
  priority        String    @default("medium")
  status          String    @default("pending")
  reminder        Boolean   @default(false)
  reminderMinutes Int?      @map("reminder_minutes")
  notes           String?
  completionNotes String?   @map("completion_notes")
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")
  contact         Contact?  @relation(fields: [contactId], references: [id], onDelete: Cascade)
  deal            Deal?     @relation(fields: [dealId], references: [id], onDelete: Cascade)
  lead            Lead?     @relation(fields: [leadId], references: [id], onDelete: Cascade)

  @@index([assignedTo])
  @@index([dueDate])
  @@index([status])
  @@index([priority])
  @@index([relatedTo, relatedId])
  @@index([leadId])
  @@index([contactId])
  @@index([dealId])
  @@map("tasks")
}

model CrmActivity {
  id           String   @id @default(uuid())
  type         String
  title        String
  description  String?
  relatedTo    String   @map("related_to")
  relatedId    String   @map("related_id")
  leadId       String?  @map("lead_id")
  contactId    String?  @map("contact_id")
  dealId       String?  @map("deal_id")
  userId       String   @map("user_id")
  stage        String?
  metadata     Json?
  duration     Int?
  outcome      String?
  activityDate DateTime @default(now()) @map("activity_date")
  createdAt    DateTime @default(now()) @map("created_at")
  contact      Contact? @relation(fields: [contactId], references: [id], onDelete: Cascade)
  deal         Deal?    @relation(fields: [dealId], references: [id], onDelete: Cascade)
  lead         Lead?    @relation(fields: [leadId], references: [id], onDelete: Cascade)
  user         User     @relation(fields: [userId], references: [id])

  @@index([relatedTo, relatedId])
  @@index([leadId])
  @@index([contactId])
  @@index([dealId])
  @@index([userId])
  @@index([type])
  @@index([stage])
  @@index([activityDate])
  @@map("crm_activities")
}

model RoomRedesign {
  id                 String         @id @default(uuid())
  email              String
  verificationToken  String         @unique @map("verification_token")
  tokenExpiry        DateTime       @map("token_expiry")
  status             RedesignStatus @default(PROCESSING)
  originalImagePath  String         @map("original_image_path")
  generatedImagePath String?        @map("generated_image_path")
  originalImageUrl   String?        @map("original_image_url")
  generatedImageUrl  String?        @map("generated_image_url")
  prompt             String?
  stylePreference    String?        @map("style_preference")
  roomType           String?        @map("room_type")
  aiModel            String         @default("flux-schnell") @map("ai_model")
  inferenceSteps     Int?           @map("inference_steps")
  processingTime     Int?           @map("processing_time")
  errorMessage       String?        @map("error_message")
  retryCount         Int            @default(0) @map("retry_count")
  viewCount          Int            @default(0) @map("view_count")
  sharedCount        Int            @default(0) @map("shared_count")
  downloadCount      Int            @default(0) @map("download_count")
  userRating         Int?           @map("user_rating")
  userFeedback       String?        @map("user_feedback")
  createdAt          DateTime       @default(now()) @map("created_at")
  updatedAt          DateTime       @updatedAt @map("updated_at")
  viewedAt           DateTime?      @map("viewed_at")
  completedAt        DateTime?      @map("completed_at")

  @@index([email])
  @@index([verificationToken])
  @@index([status])
  @@index([createdAt])
  @@index([tokenExpiry])
  @@map("room_redesigns")
}

model Testimonial {
  id           String   @id @default(uuid())
  name         String
  role         String?
  company      String?
  commentEn    String   @map("comment_en")
  commentAr    String?  @map("comment_ar")
  rating       Int
  projectTitle String?  @map("project_title")
  projectType  String?  @map("project_type")
  clientImage  String?  @map("client_image")
  projectImage String?  @map("project_image")
  locale       String   @default("en")
  featured     Boolean  @default(false)
  published    Boolean  @default(true)
  reviewDate   DateTime @default(now()) @map("review_date")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  @@index([locale])
  @@index([rating])
  @@index([featured])
  @@index([published])
  @@index([reviewDate])
  @@map("testimonials")
}

model FAQ {
  id           String   @id @default(uuid())
  questionEn   String   @map("question_en")
  questionAr   String?  @map("question_ar")
  answerEn     String   @map("answer_en")
  answerAr     String?  @map("answer_ar")
  category     String?
  order        Int      @default(0)
  locale       String   @default("en")
  featured     Boolean  @default(false)
  published    Boolean  @default(true)
  keywords     String[] @default([])
  viewCount    Int      @default(0) @map("view_count")
  helpfulCount Int      @default(0) @map("helpful_count")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  @@index([locale])
  @@index([category])
  @@index([featured])
  @@index([published])
  @@index([order])
  @@map("faqs")
}

model TeamMember {
  id              String    @id @default(uuid())
  nameEn          String    @map("name_en")
  nameAr          String?   @map("name_ar")
  roleEn          String    @map("role_en")
  roleAr          String?   @map("role_ar")
  bioEn           String    @map("bio_en")
  bioAr           String?   @map("bio_ar")
  specialties     String[]  @default([])
  yearsExperience Int?      @map("years_experience")
  education       String?
  certifications  String[]  @default([])
  profileImage    String?   @map("profile_image")
  coverImage      String?   @map("cover_image")
  email           String?
  phone           String?
  linkedin        String?
  instagram       String?
  behance         String?
  portfolio       String?
  department      String?
  order           Int       @default(0)
  locale          String    @default("en")
  featured        Boolean   @default(false)
  published       Boolean   @default(true)
  joinedAt        DateTime? @map("joined_at")
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")

  @@index([locale])
  @@index([department])
  @@index([featured])
  @@index([published])
  @@index([order])
  @@map("team_members")
}

model PricingPlan {
  id                String   @id @default(uuid())
  nameEn            String   @map("name_en")
  nameAr            String?  @map("name_ar")
  descriptionEn     String   @map("description_en")
  descriptionAr     String?  @map("description_ar")
  price             Float?
  currency          String   @default("AED")
  pricingModel      String   @default("fixed") @map("pricing_model")
  pricePrefix       String?  @map("price_prefix")
  priceSuffix       String?  @map("price_suffix")
  tier              String
  popular           Boolean  @default(false)
  recommended       Boolean  @default(false)
  featuresEn        String[] @map("features_en")
  featuresAr        String[] @map("features_ar")
  includedServices  String[] @default([]) @map("included_services")
  deliverables      String[] @default([])
  limitations       String[] @default([])
  minProjectSize    String?  @map("min_project_size")
  maxProjectSize    String?  @map("max_project_size")
  estimatedTimeline String?  @map("estimated_timeline")
  ctaTextEn         String   @default("Get Started") @map("cta_text_en")
  ctaTextAr         String?  @default("ابدأ الآن") @map("cta_text_ar")
  ctaLink           String?  @map("cta_link")
  icon              String?
  color             String?
  badge             String?
  order             Int      @default(0)
  locale            String   @default("en")
  featured          Boolean  @default(false)
  published         Boolean  @default(true)
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  @@index([locale])
  @@index([tier])
  @@index([popular])
  @@index([featured])
  @@index([published])
  @@index([order])
  @@map("pricing_plans")
}

model CaseStudy {
  id                 String    @id @default(uuid())
  titleEn            String    @map("title_en")
  titleAr            String?   @map("title_ar")
  summaryEn          String    @map("summary_en")
  summaryAr          String?   @map("summary_ar")
  clientName         String?   @map("client_name")
  clientType         String?   @map("client_type")
  showClientName     Boolean   @default(false) @map("show_client_name")
  projectType        String    @map("project_type")
  location           String?
  projectSize        String?   @map("project_size")
  completionDate     DateTime? @map("completion_date")
  duration           String?
  challengeEn        String    @map("challenge_en")
  challengeAr        String?   @map("challenge_ar")
  solutionEn         String    @map("solution_en")
  solutionAr         String?   @map("solution_ar")
  resultsEn          String    @map("results_en")
  resultsAr          String?   @map("results_ar")
  heroImage          String?   @map("hero_image")
  beforeImages       String[]  @default([]) @map("before_images")
  afterImages        String[]  @default([]) @map("after_images")
  gallery            String[]  @default([])
  videoUrl           String?   @map("video_url")
  features           String[]  @default([])
  stylesTags         String[]  @default([]) @map("styles_tags")
  budget             Float?
  budgetSaved        Float?    @map("budget_saved")
  timelineMet        Boolean   @default(true) @map("timeline_met")
  clientSatisfaction Int?      @map("client_satisfaction")
  teamMembers        String[]  @default([]) @map("team_members")
  contractors        String[]  @default([])
  keywords           String[]  @default([])
  tags               String[]  @default([])
  order              Int       @default(0)
  locale             String    @default("en")
  featured           Boolean   @default(false)
  published          Boolean   @default(true)
  createdAt          DateTime  @default(now()) @map("created_at")
  updatedAt          DateTime  @updatedAt @map("updated_at")

  @@index([locale])
  @@index([projectType])
  @@index([featured])
  @@index([published])
  @@index([order])
  @@index([completionDate])
  @@map("case_studies")
}

enum RedesignStatus {
  UPLOADING
  PROCESSING
  COMPLETED
  FAILED
  EXPIRED
}

// Google Ads & Tag Manager Integration Models
model GoogleAdsAccount {
  id                String   @id @default(uuid())
  accountName       String   @map("account_name")
  customerId        String   @unique @map("customer_id")
  developerToken    String   @map("developer_token")
  clientId          String   @map("client_id")
  clientSecret      String   @map("client_secret")
  refreshToken      String   @map("refresh_token")
  accessToken       String?  @map("access_token")
  tokenExpiresAt    DateTime? @map("token_expires_at")
  loginCustomerId   String?  @map("login_customer_id")
  isActive          Boolean  @default(true) @map("is_active")
  lastSyncAt        DateTime? @map("last_sync_at")
  syncStatus        String   @default("pending") @map("sync_status")
  syncErrorMessage  String?  @map("sync_error_message")
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")
  campaigns         GoogleAdsCampaign[]
  metrics           GoogleAdsMetrics[]

  @@index([customerId])
  @@index([isActive])
  @@index([lastSyncAt])
  @@map("google_ads_accounts")
}

model GoogleAdsCampaign {
  id                String   @id @default(uuid())
  accountId         String   @map("account_id")
  campaignId        String   @map("campaign_id")
  campaignName      String   @map("campaign_name")
  status            String
  biddingStrategy   String   @map("bidding_strategy")
  budget            Float?
  budgetMicros      BigInt?  @map("budget_micros")
  targetNetwork     String[] @default([]) @map("target_network")
  startDate         DateTime? @map("start_date")
  endDate           DateTime? @map("end_date")
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")
  account           GoogleAdsAccount @relation(fields: [accountId], references: [id], onDelete: Cascade)

  @@unique([accountId, campaignId])
  @@index([accountId])
  @@index([campaignId])
  @@index([status])
  @@map("google_ads_campaigns")
}

model GoogleAdsMetrics {
  id              String   @id @default(uuid())
  accountId       String   @map("account_id")
  campaignId      String?  @map("campaign_id")
  date            DateTime
  impressions     Int      @default(0)
  clicks          Int      @default(0)
  cost            Float    @default(0)
  costMicros      BigInt   @default(0) @map("cost_micros")
  conversions     Float    @default(0)
  conversionValue Float    @default(0) @map("conversion_value")
  ctr             Float    @default(0)
  averageCpc      Float    @default(0) @map("average_cpc")
  averageCpm      Float    @default(0) @map("average_cpm")
  searchImpressionShare Float? @map("search_impression_share")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")
  account         GoogleAdsAccount @relation(fields: [accountId], references: [id], onDelete: Cascade)

  @@unique([accountId, campaignId, date])
  @@index([accountId])
  @@index([campaignId])
  @@index([date])
  @@map("google_ads_metrics")
}

model GoogleTagManagerAccount {
  id              String   @id @default(uuid())
  accountName     String   @map("account_name")
  accountId       String   @unique @map("account_id")
  accountPath     String   @map("account_path")
  clientEmail     String   @map("client_email")
  privateKey      String   @map("private_key")
  projectId       String   @map("project_id")
  isActive        Boolean  @default(true) @map("is_active")
  lastSyncAt      DateTime? @map("last_sync_at")
  syncStatus      String   @default("pending") @map("sync_status")
  syncErrorMessage String? @map("sync_error_message")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")
  containers      GTMContainer[]

  @@index([accountId])
  @@index([isActive])
  @@index([lastSyncAt])
  @@map("google_tag_manager_accounts")
}

model GTMContainer {
  id              String   @id @default(uuid())
  accountId       String   @map("account_id")
  containerId     String   @map("container_id")
  containerName   String   @map("container_name")
  publicId        String?  @map("public_id")
  usageContext    String[] @default([]) @map("usage_context")
  domainName      String[] @default([]) @map("domain_name")
  notes           String?
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")
  account         GoogleTagManagerAccount @relation(fields: [accountId], references: [id], onDelete: Cascade)
  tags            GTMTag[]
  triggers        GTMTrigger[]
  variables       GTMVariable[]

  @@unique([accountId, containerId])
  @@index([accountId])
  @@index([containerId])
  @@map("gtm_containers")
}

model GTMTag {
  id          String   @id @default(uuid())
  containerId String   @map("container_id")
  tagId       String   @map("tag_id")
  name        String
  type        String
  firingRules String[] @default([]) @map("firing_rules")
  priority    Int?
  paused      Boolean  @default(false)
  notes       String?
  parameter   Json?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  container   GTMContainer @relation(fields: [containerId], references: [id], onDelete: Cascade)

  @@unique([containerId, tagId])
  @@index([containerId])
  @@index([type])
  @@map("gtm_tags")
}

model GTMTrigger {
  id          String   @id @default(uuid())
  containerId String   @map("container_id")
  triggerId   String   @map("trigger_id")
  name        String
  type        String
  filter      Json?
  autoEventFilter Json? @map("auto_event_filter")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  container   GTMContainer @relation(fields: [containerId], references: [id], onDelete: Cascade)

  @@unique([containerId, triggerId])
  @@index([containerId])
  @@index([type])
  @@map("gtm_triggers")
}

model GTMVariable {
  id          String   @id @default(uuid())
  containerId String   @map("container_id")
  variableId  String   @map("variable_id")
  name        String
  type        String
  parameter   Json?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  container   GTMContainer @relation(fields: [containerId], references: [id], onDelete: Cascade)

  @@unique([containerId, variableId])
  @@index([containerId])
  @@index([type])
  @@map("gtm_variables")
}

// Google Analytics 4 Integration Models
model GoogleAnalyticsProperty {
  id                String   @id @default(uuid())
  propertyName      String   @map("property_name")
  propertyId        String   @unique @map("property_id")
  measurementId     String?  @map("measurement_id")
  clientEmail       String   @map("client_email")
  privateKey        String   @map("private_key")
  projectId         String   @map("project_id")
  isActive          Boolean  @default(true) @map("is_active")
  lastSyncAt        DateTime? @map("last_sync_at")
  syncStatus        String   @default("pending") @map("sync_status")
  syncErrorMessage  String?  @map("sync_error_message")
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")
  metrics           GA4Metrics[]
  trafficSources    GA4TrafficSource[]
  realtimeMetrics   GA4RealtimeMetrics[]

  @@index([propertyId])
  @@index([isActive])
  @@index([lastSyncAt])
  @@map("google_analytics_properties")
}

model GA4Metrics {
  id                  String   @id @default(uuid())
  propertyId          String   @map("property_id")
  date                DateTime
  activeUsers         Int      @default(0) @map("active_users")
  newUsers            Int      @default(0) @map("new_users")
  sessions            Int      @default(0)
  bounceRate          Float    @default(0) @map("bounce_rate")
  engagementRate      Float    @default(0) @map("engagement_rate")
  averageSessionDuration Float @default(0) @map("average_session_duration")
  screenPageViews     Int      @default(0) @map("screen_page_views")
  screenPageViewsPerSession Float @default(0) @map("screen_page_views_per_session")
  eventCount          Int      @default(0) @map("event_count")
  conversions         Int      @default(0)
  totalRevenue        Float    @default(0) @map("total_revenue")
  createdAt           DateTime @default(now()) @map("created_at")
  updatedAt           DateTime @updatedAt @map("updated_at")
  property            GoogleAnalyticsProperty @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  @@unique([propertyId, date])
  @@index([propertyId])
  @@index([date])
  @@map("ga4_metrics")
}

model GA4TrafficSource {
  id                String   @id @default(uuid())
  propertyId        String   @map("property_id")
  date              DateTime
  sourceMedium      String   @map("source_medium")
  source            String
  medium            String
  campaign          String?
  activeUsers       Int      @default(0) @map("active_users")
  newUsers          Int      @default(0) @map("new_users")
  sessions          Int      @default(0)
  bounceRate        Float    @default(0) @map("bounce_rate")
  engagementRate    Float    @default(0) @map("engagement_rate")
  conversions       Int      @default(0)
  totalRevenue      Float    @default(0) @map("total_revenue")
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")
  property          GoogleAnalyticsProperty @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  @@unique([propertyId, date, sourceMedium])
  @@index([propertyId])
  @@index([date])
  @@index([source])
  @@index([medium])
  @@map("ga4_traffic_sources")
}

model GA4RealtimeMetrics {
  id                String   @id @default(uuid())
  propertyId        String   @map("property_id")
  timestamp         DateTime @default(now())
  activeUsers       Int      @default(0) @map("active_users")
  screenPageViews   Int      @default(0) @map("screen_page_views")
  eventCount        Int      @default(0) @map("event_count")
  topPages          Json?    @map("top_pages")
  topSources        Json?    @map("top_sources")
  topCountries      Json?    @map("top_countries")
  topDevices        Json?    @map("top_devices")
  createdAt         DateTime @default(now()) @map("created_at")
  property          GoogleAnalyticsProperty @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  @@index([propertyId])
  @@index([timestamp])
  @@map("ga4_realtime_metrics")
}

// Google Search Console Integration Models
model GoogleSearchConsoleProperty {
  id                String   @id @default(uuid())
  propertyName      String   @map("property_name")
  siteUrl           String   @unique @map("site_url")
  clientEmail       String   @map("client_email")
  privateKey        String   @map("private_key")
  projectId         String   @map("project_id")
  isActive          Boolean  @default(true) @map("is_active")
  lastSyncAt        DateTime? @map("last_sync_at")
  syncStatus        String   @default("pending") @map("sync_status")
  syncErrorMessage  String?  @map("sync_error_message")
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")
  performance       GSCPerformance[]
  queries           GSCQuery[]
  pages             GSCPage[]

  @@index([siteUrl])
  @@index([isActive])
  @@index([lastSyncAt])
  @@map("google_search_console_properties")
}

model GSCPerformance {
  id                String   @id @default(uuid())
  propertyId        String   @map("property_id")
  date              DateTime
  clicks            Int      @default(0)
  impressions       Int      @default(0)
  ctr               Float    @default(0)
  position          Float    @default(0)
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")
  property          GoogleSearchConsoleProperty @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  @@unique([propertyId, date])
  @@index([propertyId])
  @@index([date])
  @@map("gsc_performance")
}

model GSCQuery {
  id                String   @id @default(uuid())
  propertyId        String   @map("property_id")
  date              DateTime
  query             String
  clicks            Int      @default(0)
  impressions       Int      @default(0)
  ctr               Float    @default(0)
  position          Float    @default(0)
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")
  property          GoogleSearchConsoleProperty @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  @@unique([propertyId, date, query])
  @@index([propertyId])
  @@index([date])
  @@index([query])
  @@index([clicks])
  @@index([impressions])
  @@map("gsc_queries")
}

model GSCPage {
  id                String   @id @default(uuid())
  propertyId        String   @map("property_id")
  date              DateTime
  page              String
  clicks            Int      @default(0)
  impressions       Int      @default(0)
  ctr               Float    @default(0)
  position          Float    @default(0)
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")
  property          GoogleSearchConsoleProperty @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  @@unique([propertyId, date, page])
  @@index([propertyId])
  @@index([date])
  @@index([page])
  @@index([clicks])
  @@index([impressions])
  @@map("gsc_pages")
}

// ========================================
// Google Business Profile Models
// ========================================

model GoogleBusinessProfileAccount {
  id                String   @id @default(uuid())
  accountName       String   @map("account_name")
  gbpAccountId      String   @unique @map("gbp_account_id")
  locationId        String   @map("location_id")
  locationName      String?  @map("location_name")
  address           String?
  phoneNumber       String?  @map("phone_number")
  websiteUrl        String?  @map("website_url")
  clientEmail       String   @map("client_email")
  privateKey        String   @map("private_key")
  isActive          Boolean  @default(true) @map("is_active")
  lastSyncAt        DateTime? @map("last_sync_at")
  syncStatus        String   @default("pending") @map("sync_status")
  syncErrorMessage  String?  @map("sync_error_message")
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")
  reviews           GBPReview[]
  metrics           GBPMetrics[]

  @@index([gbpAccountId])
  @@index([isActive])
  @@index([lastSyncAt])
  @@map("google_business_profile_accounts")
}

model GBPReview {
  id                String   @id @default(uuid())
  accountId         String   @map("account_id")
  reviewId          String   @map("review_id")
  reviewerName      String   @map("reviewer_name")
  reviewerPhotoUrl  String?  @map("reviewer_photo_url")
  starRating        Int      @map("star_rating")
  comment           String?  @db.Text
  createTime        DateTime @map("create_time")
  updateTime        DateTime @map("update_time")
  replyComment      String?  @map("reply_comment") @db.Text
  replyUpdateTime   DateTime? @map("reply_update_time")
  sentiment         String?  // Will be added later with Natural Language API
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")
  account           GoogleBusinessProfileAccount @relation(fields: [accountId], references: [id], onDelete: Cascade)

  @@unique([accountId, reviewId])
  @@index([accountId])
  @@index([starRating])
  @@index([createTime])
  @@index([replyComment])
  @@map("gbp_reviews")
}

model GBPMetrics {
  id                String   @id @default(uuid())
  accountId         String   @map("account_id")
  date              DateTime
  views             Int      @default(0)
  searches          Int      @default(0)
  actions           Int      @default(0)
  photos            Int      @default(0)
  directionRequests Int      @default(0) @map("direction_requests")
  callClicks        Int      @default(0) @map("call_clicks")
  websiteClicks     Int      @default(0) @map("website_clicks")
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")
  account           GoogleBusinessProfileAccount @relation(fields: [accountId], references: [id], onDelete: Cascade)

  @@unique([accountId, date])
  @@index([accountId])
  @@index([date])
  @@map("gbp_metrics")
}

// ========================================
// PageSpeed Insights Models
// ========================================

model PageSpeedAnalysis {
  id                String   @id @default(uuid())
  url               String
  strategy          String   // 'mobile' or 'desktop'
  performanceScore  Int      @map("performance_score")

  // Core Web Vitals
  lcp               Float?   // Largest Contentful Paint (ms)
  fid               Float?   // First Input Delay (ms)
  cls               Float?   // Cumulative Layout Shift (score)
  fcp               Float?   // First Contentful Paint (ms)
  ttfb              Float?   // Time to First Byte (ms)

  // Additional Metrics
  speedIndex        Float?   @map("speed_index")
  totalBlockingTime Float?   @map("total_blocking_time")
  interactive       Float?   // Time to Interactive (ms)

  // Field Data (Real User Experience)
  loadingExperience Json?    @map("loading_experience")

  // Lab Data Details
  opportunities     Json?    // Performance improvement suggestions
  diagnostics       Json?    // Performance diagnostics

  // Metadata
  timestamp         DateTime @default(now())
  createdAt         DateTime @default(now()) @map("created_at")

  @@index([url])
  @@index([strategy])
  @@index([timestamp])
  @@index([performanceScore])
  @@map("pagespeed_analyses")
}

model PageSpeedMonitoring {
  id                  String    @id @default(uuid())
  name                String    // e.g., "Homepage", "Services Page"
  url                 String    @unique
  isActive            Boolean   @default(true) @map("is_active")
  monitoringFrequency String    @default("daily") @map("monitoring_frequency") // 'hourly', 'daily', 'weekly'
  strategies          String[]  @default(["mobile", "desktop"])

  // Alert Thresholds
  minPerformanceScore Int?     @default(80) @map("min_performance_score")
  maxLCP              Int?     @default(2500) @map("max_lcp") // ms
  maxFID              Int?     @default(100) @map("max_fid") // ms
  maxCLS              Float?   @default(0.1) @map("max_cls") // score

  // Latest Results
  lastAnalysisAt      DateTime? @map("last_analysis_at")
  lastMobileScore     Int?     @map("last_mobile_score")
  lastDesktopScore    Int?     @map("last_desktop_score")

  // Status
  alertStatus         String    @default("ok") @map("alert_status") // 'ok', 'warning', 'critical'
  alertMessage        String?   @map("alert_message")

  createdAt           DateTime  @default(now()) @map("created_at")
  updatedAt           DateTime  @updatedAt @map("updated_at")

  @@index([url])
  @@index([isActive])
  @@index([alertStatus])
  @@index([lastAnalysisAt])
  @@map("pagespeed_monitoring")
}

// ========================================
// Google Trends Models
// ========================================

model TrendsQuery {
  id                String   @id @default(uuid())
  keyword           String
  geo               String?  // Country code (e.g., 'US', 'AE')
  timeRange         String   @default("today 12-m") @map("time_range")

  // Results snapshot
  averageInterest   Int      @default(0) @map("average_interest") // 0-100
  peakInterest      Int      @default(0) @map("peak_interest") // 0-100
  currentInterest   Int      @default(0) @map("current_interest") // 0-100

  // Trends data (stored as JSON)
  interestOverTime  Json?    @map("interest_over_time") // Time series data
  relatedQueries    Json?    @map("related_queries") // Top and rising queries
  regionalInterest  Json?    @map("regional_interest") // Interest by region

  // Metadata
  queriedAt         DateTime @default(now()) @map("queried_at")
  createdAt         DateTime @default(now()) @map("created_at")

  @@index([keyword])
  @@index([geo])
  @@index([queriedAt])
  @@index([averageInterest])
  @@map("trends_queries")
}

model TrendsTracking {
  id                String    @id @default(uuid())
  keyword           String
  geo               String    @default("") // Empty string for worldwide
  isActive          Boolean   @default(true) @map("is_active")

  // Tracking settings
  trackingFrequency String    @default("weekly") @map("tracking_frequency") // 'daily', 'weekly', 'monthly'
  notifyOnSpike     Boolean   @default(false) @map("notify_on_spike")
  spikeThreshold    Int       @default(50) @map("spike_threshold") // % increase

  // Latest snapshot
  lastCheckedAt     DateTime? @map("last_checked_at")
  lastInterest      Int?      @map("last_interest") // 0-100
  trend             String?   // 'rising', 'falling', 'stable'
  trendPercentage   Float?    @map("trend_percentage")

  // Alert status
  alertStatus       String    @default("ok") @map("alert_status") // 'ok', 'spike', 'drop'
  alertMessage      String?   @map("alert_message")

  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @updatedAt @map("updated_at")

  @@unique([keyword, geo])
  @@index([keyword])
  @@index([isActive])
  @@index([lastCheckedAt])
  @@index([alertStatus])
  @@map("trends_tracking")
}

model TrendsRealtime {
  id                String   @id @default(uuid())
  geo               String   // Country code
  title             String
  formattedTraffic  String   @map("formatted_traffic")

  // Content
  image             Json?    // Image data
  articles          Json?    // Related articles
  shareUrl          String?  @map("share_url")

  // Rankings
  trafficValue      Int      @default(0) @map("traffic_value")
  rank              Int?     // Position in trending list

  // Metadata
  capturedAt        DateTime @default(now()) @map("captured_at")
  createdAt         DateTime @default(now()) @map("created_at")

  @@index([geo])
  @@index([capturedAt])
  @@index([trafficValue])
  @@map("trends_realtime")
}

model TrendsComparison {
  id                String   @id @default(uuid())
  name              String   // User-defined name for this comparison
  keywords          String[] // Array of keywords being compared
  geo               String   @default("")
  timeRange         String   @default("today 12-m") @map("time_range")

  // Results
  comparisonData    Json?    @map("comparison_data") // Time series for all keywords
  averages          Json?    // Average interest for each keyword
  winner            String?  // Keyword with highest average

  // Metadata
  lastUpdatedAt     DateTime @default(now()) @map("last_updated_at")
  createdAt         DateTime @default(now()) @map("created_at")

  @@index([name])
  @@index([lastUpdatedAt])
  @@map("trends_comparisons")
}

// ========================================
// Google Sheets Models
// ========================================

model SheetsExport {
  id               String   @id @default(uuid())
  title            String
  spreadsheetId    String   @map("spreadsheet_id")
  spreadsheetUrl   String   @map("spreadsheet_url")
  exportType       String   @map("export_type") // 'pagespeed', 'trends', 'reviews', 'custom'
  dataSource       String?  @map("data_source") // Source identifier
  rowCount         Int      @default(0) @map("row_count")
  sheetNames       String[] @map("sheet_names")
  sharedWith       String[] @map("shared_with")
  createdAt        DateTime @default(now()) @map("created_at")
  createdBy        String?  @map("created_by")

  @@index([exportType])
  @@index([createdAt])
  @@index([spreadsheetId])
  @@map("sheets_exports")
}
// ========================================
// YouTube Models
// ========================================

model YouTubeChannel {
  id                  String              @id @default(uuid())
  channelId           String              @unique @map("channel_id") // YouTube channel ID
  channelName         String              @map("channel_name")
  description         String?             @db.Text
  customUrl           String?             @map("custom_url")
  publishedAt         DateTime?           @map("published_at")
  thumbnailUrl        String?             @map("thumbnail_url")
  
  // Statistics (updated on sync)
  subscriberCount     Int                 @default(0) @map("subscriber_count")
  videoCount          Int                 @default(0) @map("video_count")
  viewCount           BigInt              @default(0) @map("view_count")
  
  // API Credentials
  clientEmail         String              @map("client_email")
  privateKey          String              @db.Text @map("private_key")
  projectId           String?             @map("project_id")
  
  // Sync status
  isActive            Boolean             @default(true) @map("is_active")
  lastSyncAt          DateTime?           @map("last_sync_at")
  syncStatus          String              @default("pending") @map("sync_status") // 'pending', 'syncing', 'success', 'error'
  syncErrorMessage    String?             @db.Text @map("sync_error_message")
  
  // Metadata
  createdAt           DateTime            @default(now()) @map("created_at")
  updatedAt           DateTime            @default(now()) @updatedAt @map("updated_at")
  
  // Relations
  videos              YouTubeVideo[]
  analytics           YouTubeAnalytics[]
  
  @@index([channelId])
  @@index([lastSyncAt])
  @@index([isActive])
  @@map("youtube_channels")
}

model YouTubeVideo {
  id                  String              @id @default(uuid())
  channelId           String              @map("channel_id")
  videoId             String              @unique @map("video_id") // YouTube video ID
  title               String
  description         String?             @db.Text
  publishedAt         DateTime            @map("published_at")
  thumbnailUrl        String?             @map("thumbnail_url")
  duration            String?             // ISO 8601 duration (PT15M33S)
  
  // Statistics (updated periodically)
  viewCount           Int                 @default(0) @map("view_count")
  likeCount           Int                 @default(0) @map("like_count")
  commentCount        Int                 @default(0) @map("comment_count")
  
  // Tags and categorization
  tags                String[]            @default([])
  
  // Metadata
  createdAt           DateTime            @default(now()) @map("created_at")
  updatedAt           DateTime            @default(now()) @updatedAt @map("updated_at")
  
  // Relation
  channel             YouTubeChannel      @relation(fields: [channelId], references: [id], onDelete: Cascade)
  
  @@index([channelId])
  @@index([videoId])
  @@index([publishedAt])
  @@index([viewCount])
  @@map("youtube_videos")
}

model YouTubeAnalytics {
  id                        String              @id @default(uuid())
  channelId                 String              @map("channel_id")
  date                      DateTime            @db.Date // Daily analytics
  
  // View metrics
  views                     Int                 @default(0)
  estimatedMinutesWatched   Int                 @default(0) @map("estimated_minutes_watched")
  averageViewDuration       Float               @default(0) @map("average_view_duration") // in seconds
  
  // Subscriber metrics
  subscribersGained         Int                 @default(0) @map("subscribers_gained")
  subscribersLost           Int                 @default(0) @map("subscribers_lost")
  
  // Engagement metrics
  likes                     Int                 @default(0)
  dislikes                  Int                 @default(0)
  shares                    Int                 @default(0)
  comments                  Int                 @default(0)
  
  // Metadata
  createdAt                 DateTime            @default(now()) @map("created_at")
  updatedAt                 DateTime            @default(now()) @updatedAt @map("updated_at")
  
  // Relation
  channel                   YouTubeChannel      @relation(fields: [channelId], references: [id], onDelete: Cascade)
  
  @@unique([channelId, date])
  @@index([channelId])
  @@index([date])
  @@map("youtube_analytics")
}

// ========================================
// Natural Language Models
// ========================================

model NLAnalysis {
  id                String              @id @default(uuid())
  sourceType        String              @map("source_type") // 'review', 'content', 'custom'
  sourceId          String?             @map("source_id") // Reference to source (e.g., review ID)
  text              String              @db.Text
  language          String              @default("en")
  
  // Sentiment
  sentimentScore    Float               @map("sentiment_score") // -1.0 to 1.0
  sentimentMagnitude Float              @map("sentiment_magnitude") // 0 to infinity
  sentimentLabel    String              @map("sentiment_label") // POSITIVE, NEGATIVE, NEUTRAL, MIXED
  
  // Entities and keywords
  entities          Json?               // Array of entities with sentiment
  keywords          String[]            @default([])
  categories        Json?               // Content categories with confidence
  
  // Metadata
  analyzedAt        DateTime            @default(now()) @map("analyzed_at")
  
  @@index([sourceType])
  @@index([sourceId])
  @@index([sentimentLabel])
  @@index([analyzedAt])
  @@map("nl_analyses")
}

model NLConfig {
  id                      String              @id @default(uuid())
  name                    String              @unique
  clientEmail             String              @map("client_email")
  privateKey              String              @db.Text @map("private_key")
  projectId               String?             @map("project_id")
  
  // Auto-analysis settings
  autoAnalyzeReviews      Boolean             @default(false) @map("auto_analyze_reviews")
  autoAnalyzeContent      Boolean             @default(false) @map("auto_analyze_content")
  
  // Status
  isActive                Boolean             @default(true) @map("is_active")
  lastUsedAt              DateTime?           @map("last_used_at")
  
  // Metadata
  createdAt               DateTime            @default(now()) @map("created_at")
  updatedAt               DateTime            @default(now()) @updatedAt @map("updated_at")
  
  @@map("nl_configs")
}
